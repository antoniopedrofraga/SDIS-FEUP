package subprotocols;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;

import messages.Header;
import peers.Peer;
import utilities.Constants;

public class Backup extends Thread{
	private String fileName;
	private Peer originalPeer;
	
	public Backup(Peer peer, String fileName) {
		this.originalPeer = peer;
		this.fileName = fileName;
	}
	
	public void run() {
		Path path = Paths.get(Constants.FILES_ROOT + fileName);
		try {
			byte[] data = Files.readAllBytes(path);
			sendChunks(data);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void sendChunks(byte[] data) throws IOException {
		int chunksNum = data.length / Constants.CHUNK_SIZE + 1;
		
		for (int i = 0; i < chunksNum; i++) {
			Header header = new Header(Constants.BACKUP, "1.0", originalPeer.getServerId(), fileName, i + "", "0");
			int lastIndex = (i + 1) * Constants.CHUNK_SIZE < data.length ? (i + 1) * Constants.CHUNK_SIZE : data.length;
			byte[] chunk = Arrays.copyOfRange(data, i * Constants.CHUNK_SIZE, lastIndex);
			ChunkBackup chunkBackup = new ChunkBackup(originalPeer, header, chunk);
			String reply = originalPeer.rcvMultiCastData(originalPeer.getMcSocket(), originalPeer.getMcAddress());
		}
	}
}
