package channels;

import java.io.IOException;
import java.util.concurrent.ThreadLocalRandom;

import messages.Header;
import messages.Message;
import peers.Peer;
import utilities.Constants;

public class McChannel extends Channel{
	
	public McChannel(String mcAddress, String mcPort) throws IOException {
		super(mcAddress, mcPort);
		this.thread = new MulticastThread();
	}
	
	private void handleGetChunk(String[] splittedMsg) {
		Header replyHeader = new Header(Message.STORED, header.getVersion(),
				Peer.getServerId(), header.getFileId(), header.getChunkNo(), null);
		Message reply = new Message(Peer.getMcChannel().getSocket(), Peer.getMcChannel().getAddress(), replyHeader, null);
	}
	
	public class MulticastThread extends Thread {
		public void run() {
			System.out.println("Listening the MC channel...");
			while(true) {
				try {
					socket.joinGroup(address);
					String data = rcvMultiCastData();
					String[] splittedMsg = Message.splitArgs(data);
					if(!Peer.getServerId().equals(splittedMsg[Constants.SENDER_ID])) {
						switch (splittedMsg[Constants.MESSAGE_TYPE]) {
						case Message.GETCHUNK:
							handleGetChunk(splittedMsg);
							break;
						}
					}
					socket.leaveGroup(address);
				} catch (IOException | InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}
}
