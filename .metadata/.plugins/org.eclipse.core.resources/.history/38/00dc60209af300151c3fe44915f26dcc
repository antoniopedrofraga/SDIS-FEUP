package subprotocols;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import data.ChunksList;
import data.Data;

public class SpaceReclaim extends Thread {
	static int space; //space in bytes
	static File smallerChunk;
	SpaceReclaim (int space) {
		this.space = space;
		this.smallerChunk = null;
	}
	
	public void run() {
		if (space > Data.getUsedSpace()) {
			System.out.println("Space to recover is bigger than the space used by this peer, will delete all chunks.");
			space = Data.getUsedSpace();
		}
		
		HashMap<String, ChunksList> chunksSaved = Data.getChunksSaved();
		for (Map.Entry<String, ChunksList> entry : chunksSaved.entrySet()) {
		    String fileId = entry.getKey();
		    ChunksList chunkNo = entry.getValue();
		    space -= Data.deleteChunk(fileId, chunkNo.get(0));
		    if (space == 0)
		    	return;
		}
	}

	public static int getSpace() {
		return space;
	}

	public static void updateSmallerChunk(File chunk) {
		if (smallerChunk == null)
			smallerChunk = chunk;
		else {
			if (chunkSize)
		}
	}
}
