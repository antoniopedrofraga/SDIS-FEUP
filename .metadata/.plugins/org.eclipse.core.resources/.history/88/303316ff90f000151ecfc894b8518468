package peers;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;

import exceptions.ArgsException;
import messages.Message;
import messages.Reply;
import subprotocols.ChunkBackup;

public class Peer {
	private String serverId;
	
	private MulticastThread mcThread;
	private MulticastSocket mcSocket;
	private InetAddress mcAddress;
	private int mcPort;
	
	private MdbThread mdbThread;
	private MulticastSocket mdbSocket;
	private InetAddress mdbAddress;
	private int mdbPort;
	
	private InetAddress mdrAddress;
	private int mdrPort;
	
	
	
	public Peer(String serverId, String mcAddress, String mcPort,
			String mdbAddress, String mdbPort, String mdrAddress,
			String mdrPort) throws IOException {
		this.serverId = serverId;
		
		this.mcAddress = InetAddress.getByName(mcAddress);
		this.mcPort = Integer.parseInt(mcPort);
		this.mcSocket = new MulticastSocket(this.mcPort);
		this.mcThread = new MulticastThread();
		this.mcThread.start();
		
		this.mdbAddress = InetAddress.getByName(mdbAddress);
		this.mdbPort = Integer.parseInt(mdbPort);
		this.mdbSocket = new MulticastSocket(this.mdbPort);
		this.mdbThread = new MdbThread();
		//this.mdbThread.start();
		
		this.mdrAddress = InetAddress.getByName(mdrAddress);
		this.mdrPort = Integer.parseInt(mdrPort);
		
	}
	
	public String rcvMultiCastData(MulticastSocket socket, InetAddress address) throws IOException {
        socket.joinGroup(address);
        byte[] rbuf = new byte[utilities.Constants.CHUNK_SIZE];
		DatagramPacket packet = new DatagramPacket(rbuf, rbuf.length);
		socket.receive(packet);
		String received = new String(packet.getData(), 0, packet.getLength());
        socket.leaveGroup(address);
        return received;
	}

	public static void main(String[] args) throws ArgsException, IOException {
		if (args.length != 7)
			throw new ArgsException("peer <Server ID> <MC> <MC port> <MDB> <MDB port> <MDR> <MDR port>");
		Peer peer = new Peer(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	}
	
	private class MulticastThread extends Thread {
		public void run() {
		}
	}
	
	private class MdbThread extends Thread {
		public void run() {
			while(true) {
				try {
					String data = rcvMultiCastData();
					Reply reply = new Reply();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}
