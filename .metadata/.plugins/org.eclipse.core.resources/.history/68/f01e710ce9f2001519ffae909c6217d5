package channels;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;

import messages.Header;
import messages.Message;
import peers.Peer;


public class Channel {
	Thread thread;
	MulticastSocket socket;
    InetAddress address;
	private int port;
	
	Channel(String address, String port) throws IOException {
		this.address = InetAddress.getByName(address);
		this.port = Integer.parseInt(port);
		this.socket = new MulticastSocket(this.port);
		this.socket.setTimeToLive(1);
	}
	
	public String rcvMultiCastData() throws IOException {
        byte[] rbuf = new byte[utilities.Constants.CHUNK_SIZE];
		DatagramPacket packet = new DatagramPacket(rbuf, rbuf.length);
		socket.receive(packet);
		String received = new String(packet.getData(), 0, packet.getLength());
        return received;
	}
	
	public void listen() {
		this.thread.start();
	}
	
	public MulticastSocket getSocket() {
		return socket;
	}

	public InetAddress getAddress() {
		return address;
	}
	
	public class MultiCastListener extends Thread {
		public void run() {
			while(true) {
				try {
					socket.joinGroup(address);
					// separate data
					String data = rcvMultiCastData();
					Message message = Message.getMessageFromData(data);
					Header header = message.getHeader();
					byte[] body = message.getBody();
					
					//analising data
					if(!Peer.getServerId().equals(header.getSenderId())) {
						handleMessage(header, body);
						switch (header.getMsgType()) {
						case Message.PUTCHUNK:
							System.out.println("Received a PUTCHUNK message, will handle it...");
							handlePutChunk(header, body);
							break;
						default:
							System.out.println("Ignoring message from type " + header.getMsgType());
							break;
						}
					}
					socket.leaveGroup(address);
				} catch (IOException | InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
}
