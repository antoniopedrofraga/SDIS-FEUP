package subprotocols;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import database.FileInfo;
import messages.Header;
import messages.Message;
import peers.Peer;
import utilities.Constants;

public class ChunkBackup extends Thread {
	private Message message;
	private ArrayList<Header> validReplies;
	public ChunkBackup(Header header, byte[] body) {
		this.message = new Message(peers.Peer.getMdbChannel().getSocket(), peers.Peer.getMdbChannel().getAddress(), header, body);
		this.validReplies = new ArrayList<>();
	}

	public void sendChunk() {
		new Thread(this.message).start();
	}
	
	public void updateRepliesInfo() {
		checkReplies();
		tellStorage();
	}


	private boolean validReply(Header replyHeader) {
		if (!replyHeader.getMsgType().equals(Message.STORED))
			return false;
		if (replyHeader.getSenderId().equals(Peer.getServerId()))
			return false;
		if (!replyHeader.getFileId().equals(message.getHeader().getFileId()))
			return false;
		if (!replyHeader.getChunkNo().equals(message.getHeader().getChunkNo()))
			return false;
		validReplies.add(replyHeader);
		System.out.println("Received a valid reply");
		return true;
	}

	public void checkReplies() {
		int replicationDeg = Integer.parseInt(message.getHeader().getReplicationDeg());
		for (int i = 0; i < replicationDeg; i++) {
			Message reply;
			ArrayList<Message> storedReplies = Peer.getMcChannel().getStoredReplies();
			for (int a = 0; a < storedReplies.size(); a++) {
				reply = storedReplies.get(a);
				if (!validReply(reply.getHeader())) {
					i--;
				} 
				Peer.getMcChannel().getStoredReplies().remove(storedReplies.get(a));
			}
		}
	}
	
	private void tellStorage() {
		File file = Backup.getFile();
		int numberOfChunks = (int) (file.length() / Constants.CHUNK_SIZE + 1);
		if (Peer.getStorage().getBackedUpFiles().get(file.getName()) == null) {
			Peer.getStorage().getBackedUpFiles().markAsBackedUp(file.getName(), new FileInfo(message.getHeader().getFileId(), numberOfChunks, file.length()));
			System.out.println("Creating FileInfo");
		} 
		String fileName = Backup.getFile().getName();
		FileInfo fileInfo = Peer.getStorage().getBackedUpFiles().get(fileName);
		int chunkNo = Integer.parseInt(message.getHeader().getChunkNo());
		fileInfo.getBackedUpChunks().put(chunkNo, validReplies);
	}

	@Override
	public void run() {
		checkReplies();
		tellStorage();
	}

}
